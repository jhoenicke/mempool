#!/usr/bin/python3

import os
import sys
import codecs
import binascii
import hashlib
import grpc
import lightning_pb2 as ln
import lightning_pb2_grpc as lnrpc
from urllib.parse import parse_qs

metadata="[[\"text/plain\",\"Johoe's Mempool\"],[\"text/identifier\",\"mempool@jhoenicke.de\"],[\"image/png;base64\",\"\"]]"

def connect():
    # Due to updated ECDSA generated tls.cert we need to let gprc know that
    # we need to use that cipher suite otherwise there will be a handshake
    # error when we communicate with the lnd rpc server.
    os.environ["GRPC_SSL_CIPHER_SUITES"] = 'HIGH+ECDSA'

    with open('/home/lnd/.lnd/tls.cert', 'rb') as f:
        cert = f.read()

    with open('/home/lnd/.lnd/data/chain/bitcoin/mainnet/invoice.macaroon', 'rb') as f:
        macaroon_bytes = f.read()
        macaroon = codecs.encode(macaroon_bytes, 'hex')

    def metadata_callback(_context, callback):
        # for more info see grpc docs
        callback([('macaroon', macaroon)], None)

    # build ssl credentials using the cert the same as before
    cert_creds = grpc.ssl_channel_credentials(cert)
    # now build meta data credentials
    auth_creds = grpc.metadata_call_credentials(metadata_callback)
    # combine the cert credentials and the macaroon auth credentials
    # such that every call is properly encrypted and authenticated
    combined_creds = grpc.composite_channel_credentials(cert_creds, auth_creds)

    # finally pass in the combined credentials when creating a channel
    channel = grpc.secure_channel('localhost:10009', combined_creds)
    stub = lnrpc.LightningStub(channel)
    return stub

def main():
    stub = connect()
    form = parse_qs(os.environ['QUERY_STRING'])
    value = int(form["amount"][0]) if "amount" in form.keys() else 0
    memo = (" - " + form["comment"][0]) if "comment" in form.keys() else ""
    memo = f"Johoe's Mempool{memo}"
    descr_hash = hashlib.sha256(metadata.encode('utf-8')).digest()

    invoice = stub.AddInvoice(ln.Invoice(memo=memo, value_msat=value, description_hash=descr_hash))
    print("Content-Type: application/json; charset=UTF-8")
    print("")
    print(f'{{"pr":"{invoice.payment_request}","routes":[]}}')

debug = False
#debug = True
if debug:
    sys.stderr = sys.stdout
try:
    main()
except Exception:
    import traceback
    print("Status: 500 Internal Error")
    print("Content-Type: text/html; charset=UTF-8")
    print("")
    print("<h1>500 Internal Server Error</h1>")
    if debug:
        print("<pre>")
        traceback.print_exc()
        print("</pre>")
    else:
        traceback.print_exc()
